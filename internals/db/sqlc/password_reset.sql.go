// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: password_reset.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPasswordToken = `-- name: CreatePasswordToken :one
INSERT INTO password_reset (token, expires_at, is_active, user_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
RETURNING id, token, expires_at, is_active, user_id created_at, updated_at
`

type CreatePasswordTokenParams struct {
	Token     string           `json:"token"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
	IsActive  pgtype.Bool      `json:"is_active"`
	UserID    pgtype.UUID      `json:"user_id"`
}

type CreatePasswordTokenRow struct {
	ID        pgtype.UUID      `json:"id"`
	Token     string           `json:"token"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
	IsActive  pgtype.Bool      `json:"is_active"`
	CreatedAt pgtype.UUID      `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreatePasswordToken(ctx context.Context, arg CreatePasswordTokenParams) (CreatePasswordTokenRow, error) {
	row := q.db.QueryRow(ctx, createPasswordToken,
		arg.Token,
		arg.ExpiresAt,
		arg.IsActive,
		arg.UserID,
	)
	var i CreatePasswordTokenRow
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ExpiresAt,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpiredTokens = `-- name: DeleteExpiredTokens :exec
DELETE FROM password_reset
WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredTokens)
	return err
}

const deletePasswordToken = `-- name: DeletePasswordToken :exec
DELETE FROM password_reset WHERE id = $1
`

func (q *Queries) DeletePasswordToken(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePasswordToken, id)
	return err
}

const getPasswordToken = `-- name: GetPasswordToken :one
SELECT id, token, is_active, expires_at, user_id, created_at, updated_at FROM password_reset 
WHERE token = $1 LIMIT 1
`

func (q *Queries) GetPasswordToken(ctx context.Context, token string) (PasswordReset, error) {
	row := q.db.QueryRow(ctx, getPasswordToken, token)
	var i PasswordReset
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.IsActive,
		&i.ExpiresAt,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePasswordToken = `-- name: UpdatePasswordToken :one
UPDATE password_reset 
SET expires_at = $2, is_active = $3
WHERE token = $1
RETURNING id, token, expires_at, is_active, user_id created_at, updated_at
`

type UpdatePasswordTokenParams struct {
	Token     string           `json:"token"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
	IsActive  pgtype.Bool      `json:"is_active"`
}

type UpdatePasswordTokenRow struct {
	ID        pgtype.UUID      `json:"id"`
	Token     string           `json:"token"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
	IsActive  pgtype.Bool      `json:"is_active"`
	CreatedAt pgtype.UUID      `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdatePasswordToken(ctx context.Context, arg UpdatePasswordTokenParams) (UpdatePasswordTokenRow, error) {
	row := q.db.QueryRow(ctx, updatePasswordToken, arg.Token, arg.ExpiresAt, arg.IsActive)
	var i UpdatePasswordTokenRow
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ExpiresAt,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
