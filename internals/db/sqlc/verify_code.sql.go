// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: verify_code.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVerifyCode = `-- name: CreateVerifyCode :one
INSERT INTO verification_codes (code, expires_at, is_active, user_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
RETURNING id, code, expires_at, is_active, user_id created_at, updated_at
`

type CreateVerifyCodeParams struct {
	Code      string           `json:"code"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
	IsActive  pgtype.Bool      `json:"is_active"`
	UserID    pgtype.UUID      `json:"user_id"`
}

type CreateVerifyCodeRow struct {
	ID        pgtype.UUID      `json:"id"`
	Code      string           `json:"code"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
	IsActive  pgtype.Bool      `json:"is_active"`
	CreatedAt pgtype.UUID      `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreateVerifyCode(ctx context.Context, arg CreateVerifyCodeParams) (CreateVerifyCodeRow, error) {
	row := q.db.QueryRow(ctx, createVerifyCode,
		arg.Code,
		arg.ExpiresAt,
		arg.IsActive,
		arg.UserID,
	)
	var i CreateVerifyCodeRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.ExpiresAt,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpiredCodes = `-- name: DeleteExpiredCodes :exec
DELETE FROM verification_codes
WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredCodes(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredCodes)
	return err
}

const deleteVerifyCode = `-- name: DeleteVerifyCode :exec
DELETE FROM verification_codes WHERE id = $1
`

func (q *Queries) DeleteVerifyCode(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteVerifyCode, id)
	return err
}

const getVerifyCode = `-- name: GetVerifyCode :one
SELECT id, code, is_active, expires_at, user_id, created_at, updated_at FROM verification_codes 
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetVerifyCode(ctx context.Context, code string) (VerificationCode, error) {
	row := q.db.QueryRow(ctx, getVerifyCode, code)
	var i VerificationCode
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.IsActive,
		&i.ExpiresAt,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateVerifyCode = `-- name: UpdateVerifyCode :one
UPDATE verification_codes 
SET expires_at = $2, is_active = $3
WHERE code = $1
RETURNING id, code, expires_at, is_active, user_id created_at, updated_at
`

type UpdateVerifyCodeParams struct {
	Code      string           `json:"code"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
	IsActive  pgtype.Bool      `json:"is_active"`
}

type UpdateVerifyCodeRow struct {
	ID        pgtype.UUID      `json:"id"`
	Code      string           `json:"code"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
	IsActive  pgtype.Bool      `json:"is_active"`
	CreatedAt pgtype.UUID      `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateVerifyCode(ctx context.Context, arg UpdateVerifyCodeParams) (UpdateVerifyCodeRow, error) {
	row := q.db.QueryRow(ctx, updateVerifyCode, arg.Code, arg.ExpiresAt, arg.IsActive)
	var i UpdateVerifyCodeRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.ExpiresAt,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
