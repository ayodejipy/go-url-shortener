// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: url.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUrl = `-- name: CreateUrl :one
INSERT INTO urls (original_url, short_code, user_id, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id, original_url, short_code, click_count, is_active, user_id, created_at, updated_at
`

type CreateUrlParams struct {
	OriginalUrl string      `json:"original_url"`
	ShortCode   string      `json:"short_code"`
	UserID      pgtype.UUID `json:"user_id"`
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (Url, error) {
	row := q.db.QueryRow(ctx, createUrl, arg.OriginalUrl, arg.ShortCode, arg.UserID)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.ClickCount,
		&i.IsActive,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUrl = `-- name: DeleteUrl :exec
DELETE FROM urls WHERE id = $1
`

func (q *Queries) DeleteUrl(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUrl, id)
	return err
}

const getUrl = `-- name: GetUrl :one
SELECT id, original_url, short_code, click_count, is_active, user_id, created_at, updated_at FROM urls 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUrl(ctx context.Context, id pgtype.UUID) (Url, error) {
	row := q.db.QueryRow(ctx, getUrl, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.ClickCount,
		&i.IsActive,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUrlByCode = `-- name: GetUrlByCode :one
SELECT id, original_url, short_code, click_count, is_active, user_id, created_at, updated_at FROM urls 
WHERE short_code = $1 LIMIT 1
`

func (q *Queries) GetUrlByCode(ctx context.Context, shortCode string) (Url, error) {
	row := q.db.QueryRow(ctx, getUrlByCode, shortCode)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.ClickCount,
		&i.IsActive,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUrls = `-- name: GetUrls :many
SELECT id, original_url, short_code, click_count, is_active, user_id, created_at, updated_at FROM urls ORDER BY id
`

func (q *Queries) GetUrls(ctx context.Context) ([]Url, error) {
	rows, err := q.db.Query(ctx, getUrls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.OriginalUrl,
			&i.ShortCode,
			&i.ClickCount,
			&i.IsActive,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUrlActive = `-- name: UpdateUrlActive :one
UPDATE urls 
SET is_active = $2
WHERE id = $1
RETURNING id, original_url, short_code, click_count, is_active, user_id, created_at
`

type UpdateUrlActiveParams struct {
	ID       pgtype.UUID `json:"id"`
	IsActive pgtype.Bool `json:"is_active"`
}

type UpdateUrlActiveRow struct {
	ID          pgtype.UUID      `json:"id"`
	OriginalUrl string           `json:"original_url"`
	ShortCode   string           `json:"short_code"`
	ClickCount  pgtype.Int4      `json:"click_count"`
	IsActive    pgtype.Bool      `json:"is_active"`
	UserID      pgtype.UUID      `json:"user_id"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) UpdateUrlActive(ctx context.Context, arg UpdateUrlActiveParams) (UpdateUrlActiveRow, error) {
	row := q.db.QueryRow(ctx, updateUrlActive, arg.ID, arg.IsActive)
	var i UpdateUrlActiveRow
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.ClickCount,
		&i.IsActive,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const updateUrlClickCount = `-- name: UpdateUrlClickCount :one
UPDATE urls 
SET click_count = $2, is_active = $3
WHERE id = $1
RETURNING id, original_url, short_code, click_count, is_active, user_id, created_at
`

type UpdateUrlClickCountParams struct {
	ID         pgtype.UUID `json:"id"`
	ClickCount pgtype.Int4 `json:"click_count"`
	IsActive   pgtype.Bool `json:"is_active"`
}

type UpdateUrlClickCountRow struct {
	ID          pgtype.UUID      `json:"id"`
	OriginalUrl string           `json:"original_url"`
	ShortCode   string           `json:"short_code"`
	ClickCount  pgtype.Int4      `json:"click_count"`
	IsActive    pgtype.Bool      `json:"is_active"`
	UserID      pgtype.UUID      `json:"user_id"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) UpdateUrlClickCount(ctx context.Context, arg UpdateUrlClickCountParams) (UpdateUrlClickCountRow, error) {
	row := q.db.QueryRow(ctx, updateUrlClickCount, arg.ID, arg.ClickCount, arg.IsActive)
	var i UpdateUrlClickCountRow
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.ClickCount,
		&i.IsActive,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
